//
// Copyright (C) 2016-2018 Rhonda Software.
// All rights reserved.
//

syntax = "proto2";

package Camera.Capture.Still;

// type_url: Camera.Capture.Still.SetBurstSettings
// Allowed from: Mobile App, Flight Controller
message SetBurstSettings {

    // Valid values: 3/1, 5/1, 10/1
    // Burst continues for 1 sec with specified FPS.
    optional Fps fps = 1;

    // type_url: Camera.Capture.Still.SetBurstSettings.Response
    message Response {
        optional ErrorCode ret = 1;
    }

    // type_url: Camera.Capture.Still.SetBurstSettings.Notification
    message Notification {
        optional Fps fps = 1;
    }
}

// type_url: Camera.Capture.Still.GetBurstSettings
// Allowed from: Mobile App, Flight Controller
message GetBurstSettings {

    // type_url: Camera.Capture.Still.GetBurstSettings.Response
    message Response {
        optional ErrorCode ret = 1;

        optional Fps fps = 2;
    }
}

// type_url: Camera.Capture.Still.CaptureStill
// Allowed from: Mobile App, Flight Controller
message CaptureStill {

    enum Mode {
        CAPTURE_SINGLE = 0;
        CAPTURE_BURST = 1;
    }

    optional Mode mode = 1;

    // type_url: Camera.Capture.Still.CaptureStill.Response
    message Response {
    // Return codes:
        //  SUCCESS
        //  STORAGE_FULL
        //  STORAGE_FAILURE
        //  WRITE_PROTECT
        //  WRONG_STATE - returned if capture is not possible in current state
        optional ErrorCode ret = 1;

        // Contains created DCF object name
        optional string dcf_object_name = 2;
    }

    // sent asyncronously when flow is finished
    message FlowFinished {
        // Status codes:
        //  SUCCESS
        //  STORAGE_FULL
        //  STORAGE_FAILURE
        //  WRITE_PROTECT
        //  UNKNOWN_ERROR
        optional ErrorCode status = 1;
        optional uint32 message_id = 2;
    }
}

// type_url: Camera.Capture.Still.ObjectComplete
// Allowed from: Camera
message ObjectComplete {
    optional ObjectInfo  dcf_object = 1;
}

enum CompressRatio {
    COMPRESS_RATIO_LOW = 0;    // Used for best quality of JPG
    COMPRESS_RATIO_NORMAL = 1; // Used for normal quality of JPG
    COMPRESS_RATIO_HIGH = 2;   // Used for low quality of JPG
}

enum ContainerType {
    CONTAINER_TYPE_JPEG = 0;
    CONTAINER_TYPE_DNG = 1;
}

// Aux message not to be sent standalone
message StillConfig {
    optional CompressRatio compress_ratio = 1;
    optional ContainerType container_type = 2;
}

// type_url: Camera.Capture.Still.SetStillSettings
message SetStillSettings {

    optional StillConfig still_config = 1;

    // type_url: Camera.Capture.Still.SetStillSettings.Response
    message Response {
    // Return codes:
        //  STATUS_SUCCESS
        //  STATUS_INVALID_VALUE
        //  STATUS_UNKNOWN_ERROR
        optional ErrorCode ret = 1;
    }
}

// type_url: Camera.Capture.Still.GetStillSettings
message GetStillSettings {

    // type_url: Camera.Capture.Still.GetStillSettings.Response
    message Response {
    // Return codes:
        //  STATUS_SUCCESS
        //  STATUS_UNKNOWN_ERROR
        optional ErrorCode ret = 1;

        optional StillConfig still_config = 2;
    }
}

enum ErrorCode {
    STATUS_SUCCESS = 0;

    // Range of 1 - 99 is for generic errors
    STATUS_UNKNOWN_ERROR = 1;
    STATUS_HARDWARE_ERROR = 2;

    // Range of 100 - 199 is for protocol errors
    STATUS_UNKNOWN_REQUEST = 100;
    STATUS_INVALID_SYNTAX = 101;
    STATUS_INVALID_VALUE = 102;
    STATUS_NOT_IMPLEMENTED = 103;
    STATUS_NOT_AUTHORIZED = 104;
    STATUS_AUTHORIZATION_ERROR = 105;
    STATUS_TIMEDOUT = 106;
    STATUS_BUSY = 107;

    // Range of 200 - 299 is for storage-specific errors
    STATUS_NO_SD_CARD = 201;
    STATUS_SD_CARD_UNFORMATTED = 202;
    STATUS_STORAGE_FAILURE = 203;
    STATUS_STORAGE_FULL = 204;
    STATUS_WRITE_PROTECT = 205;
    STATUS_FILE_NOT_FOUND = 206;
    STATUS_NOT_AN_OBJECT = 207;
    STATUS_INVALID_FILE = 208;
    STATUS_UNSUPPORTED_FILESYSTEM = 209;
    STATUS_FILESYSTEM_CHECK_FAILURE = 210;
    STATUS_FILENAME_TOO_LONG = 211;
    STATUS_SD_CLASS_NOT_SUPPORTED = 212;
    STATUS_LOW_SD_CAPACITY = 213;

    // Range of 300-399 for connectivity-related errors
    STATUS_STATUS_NO_NETWORK = 300;
    STATUS_NOT_CONNECTED = 301;
    STATUS_CONNECTION_ERROR = 302;
    STATUS_NO_DHCP_LEASE = 303;
    STATUS_NOT_CONFIGURED = 304;

    // Range of 1000 - 1099 is for application-specific errors
    STATUS_PERMISSION_DENIED = 1000;
    STATUS_WRONG_STATE = 1001;
    STATUS_INVALID_CONFIG = 1002;
    STATUS_INVALID_SEQUENCE_ID = 1003;
    STATUS_INVALID_CAMERA_ID = 1004;
    STATUS_LOW_BATTERY = 1005;
    STATUS_LENS_POSITION_NOT_SUPPORTED = 1006;
    // Camera rejects requested operation because the temperature is high for this operation.
    STATUS_HIGH_TEMPERATURE = 1007;

    // Range of 2000 - 2099 is for streaming-specific errors
    STATUS_CONNECTION_FAILED = 2000;
}

message Fps {
    optional uint32 num = 1;  // numerator
    optional uint32 den = 2;  // denominator
}

message ObjectInfo {
    enum ObjectType {
        OBJECT_TYPE_UNKNOWN = 0;
        OBJECT_TYPE_IMAGE = 1;
        OBJECT_TYPE_VIDEO = 2;
    }
    optional string name = 1;

    optional uint64 created = 2;
    repeated FileInfo files = 3;

    // The fields below allow provide relevant information about main file
    // of the object - it's type, full path to thumbnail, full path to main file,
    // and its size
    // It is expected that a project will use either FileInfo above or fields below.

    // Type of the object, either video (MP4) or image (JPEG)
    optional ObjectType object_type = 4;

    // Full path and filename of object
    optional string file_path = 5;

    // Full path and filename for thumbnail
    optional string thumbnail = 6;

    // Size of file in bytes
    // Filled in only when detailed info requested (detailed = true)
    optional uint64 size = 7;
}

message FileInfo {
    enum FileType {
        FILE_TYPE_UNDEFINED = 0;
        FILE_TYPE_VIDEO     = 1;
        FILE_TYPE_IMAGE     = 2;
        FILE_TYPE_METADATA  = 3;
    }

    message Size {
        optional uint32 width = 1;
        optional uint32 height = 2;
    }
    optional FileType type = 1;
    optional Size size = 2;
    optional uint32 duration = 3;

    optional string postfix = 4;
    optional string extension = 5;
    optional uint64 file_created = 6;
    optional uint64 file_size = 7;

    // User data fields (if any) from UDTA atom of video file

    // Aux message to describe user data field
    message UserDataFields {
        optional string name = 1;
        optional string value = 2;
    }

    // Aux message to make user data optional
    message UserData
    {
        repeated UserDataFields fields = 1;
    }

    optional UserData user_data = 8;
    optional Fps fps = 9;

}
