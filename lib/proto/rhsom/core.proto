//
// Copyright (C) 2016-2023 Rhonda Software.
// All rights reserved.
//

syntax = "proto2";

enum ErrorCode {
    STATUS_SUCCESS = 0;

    // Range of 1 - 99 is for generic errors
    STATUS_UNKNOWN_ERROR = 1;
    STATUS_HARDWARE_ERROR = 2;

    // Range of 100 - 199 is for protocol errors
    STATUS_UNKNOWN_REQUEST = 100;
    STATUS_INVALID_SYNTAX = 101;
    STATUS_INVALID_VALUE = 102;
    STATUS_NOT_IMPLEMENTED = 103;
    STATUS_NOT_AUTHORIZED = 104;
    STATUS_AUTHORIZATION_ERROR = 105;
    STATUS_TIMEDOUT = 106;
    STATUS_BUSY = 107;

    // Range of 200 - 299 is for storage-specific errors
    STATUS_NO_SD_CARD = 201;
    STATUS_SD_CARD_UNFORMATTED = 202;
    STATUS_STORAGE_FAILURE = 203;
    STATUS_STORAGE_FULL = 204;
    STATUS_WRITE_PROTECT = 205;
    STATUS_FILE_NOT_FOUND = 206;
    STATUS_NOT_AN_OBJECT = 207;
    STATUS_INVALID_FILE = 208;
    STATUS_UNSUPPORTED_FILESYSTEM = 209;
    STATUS_FILESYSTEM_CHECK_FAILURE = 210;
    STATUS_FILENAME_TOO_LONG = 211;
    STATUS_SD_CLASS_NOT_SUPPORTED = 212;
    STATUS_LOW_SD_CAPACITY = 213;

    // Range of 300-399 for connectivity-related errors
    STATUS_STATUS_NO_NETWORK = 300;
    STATUS_NOT_CONNECTED = 301;
    STATUS_CONNECTION_ERROR = 302;
    STATUS_NO_DHCP_LEASE = 303;
    STATUS_NOT_CONFIGURED = 304;

    // Range of 1000 - 1099 is for application-specific errors
    STATUS_PERMISSION_DENIED = 1000;
    STATUS_WRONG_STATE = 1001;
    STATUS_INVALID_CONFIG = 1002;
    STATUS_INVALID_SEQUENCE_ID = 1003;
    STATUS_INVALID_CAMERA_ID = 1004;
    STATUS_LOW_BATTERY = 1005;
    STATUS_LENS_POSITION_NOT_SUPPORTED = 1006;
    // Camera rejects requested operation because the temperature is high for this operation.
    STATUS_HIGH_TEMPERATURE = 1007;

    // Range of 2000 - 2099 is for streaming-specific errors
    STATUS_CONNECTION_FAILED = 2000;
}


enum DeviceId
{
    DEVICE_CAMERA    = 0x00000000;

    // Mobile WiFi
    DEVICE_MOBILE    = 0x00010000;

    // Microcontroller, Mobile BLE
    DEVICE_MCU       = 0x00040000;
}

message Message {
    // Specifies recipient of the message

    optional uint32 destination_id = 1;

    // This fiels is used to distinguish coupled request and response
    // messages: for such messages, message_id should be the same.

    optional uint32 message_id = 2;

    // This field is optional and could be used for passing arbitrary context
    // for specific request. Field's content should be copied from request
    // message to response message.

    optional uint64 user_data = 3;

    // Specifies type of message serialized in 'value' field.
    // Type of message is it's full name (i.e. message name with all namespaces specified,
    // e.g. "Camera.Capture.Video.StartRecord", or "Camera.Ping.Response")

    optional string type_url = 4;

    // Must be valid serialized data of the above specified type.

    optional bytes data = 5;

    // Specifies sender of the message.
    // This field can be omitted. In this case Sender is defined by communicator.

    optional uint32 source_id = 6;
}


// =============================================================================
// Core requests


// This is an empty message that could be sent periodically to check if the remote
// endpoint is still alive
//
// type_url: Camera.Ping
// Allowed from: Mobile App, Flight Controller
message Ping {
    option deprecated = true;
    // This is a response to a Ping
    // type_url: Camera.Ping.Response
    message Response {
        optional ErrorCode ret = 1;
    }
}

// This message is a response for generic errors
message Error {
    // type_url: Camera.Error.Response
    message Response {
        optional ErrorCode ret = 1;
    }
}
